###############################################################################
#                                                                             #
#     IAR Systems ARM Assembler V4.31A/W32 01/Mar/2008  10:18:23              #
#     Copyright 1999-2006 IAR Systems. All rights reserved.                   #
#                                                                             #
#           Source file   =  F:\airplane\arm\atmel\AT91SAM7SE512_IAR\AT91SAM7SE512-USART_USB-IAR4_31A-1_00\AT91SAM7SE-USART_USB\Compil\srcIAR\Cstartup.s79#
#           List file     =  F:\airplane\arm\atmel\AT91SAM7SE512_IAR\AT91SAM7SE512-USART_USB-IAR4_31A-1_00\AT91SAM7SE-USART_USB\Compil\Binary\List\Cstartup.lst#
#           Object file   =  F:\airplane\arm\atmel\AT91SAM7SE512_IAR\AT91SAM7SE512-USART_USB-IAR4_31A-1_00\AT91SAM7SE-USART_USB\Compil\Binary\Obj\Cstartup.r79#
#           Command line  =  F:\airplane\arm\atmel\AT91SAM7SE512_IAR\AT91SAM7SE512-USART_USB-IAR4_31A-1_00\AT91SAM7SE-USART_USB\Compil\srcIAR\Cstartup.s79 #
#                            -OF:\airplane\arm\atmel\AT91SAM7SE512_IAR\AT91SAM7SE512-USART_USB-IAR4_31A-1_00\AT91SAM7SE-USART_USB\Compil\Binary\Obj\ #
#                            -s+ -M<> -w+ -r                                  #
#                            -LF:\airplane\arm\atmel\AT91SAM7SE512_IAR\AT91SAM7SE512-USART_USB-IAR4_31A-1_00\AT91SAM7SE-USART_USB\Compil\Binary\List\ #
#                            -t8 --cpu ARM7TDMI --fpu None                    #
#                            -IC:\Program Files\IAR Systems\Embedded Workbench 4.0 Evaluation\ARM\INC\ #
#                            -IF:\airplane\arm\atmel\AT91SAM7SE512_IAR\AT91SAM7SE512-USART_USB-IAR4_31A-1_00\AT91SAM7SE-USART_USB\Compil\..\..\ #
#                                                                             #
###############################################################################

    1    00000000              ;-----------------------------------------------
                               -------------------------------
    2    00000000              ;-         ATMEL Microcontroller Software
                                Support  -  ROUSSET  -
    3    00000000              ;-----------------------------------------------
                               -------------------------------
    4    00000000              ;- DISCLAIMER:  THIS SOFTWARE IS PROVIDED BY
                                ATMEL "AS IS" AND ANY EXPRESS OR
    5    00000000              ;- IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                LIMITED TO, THE IMPLIED WARRANTIES OF
    6    00000000              ;- MERCHANTABILITY, FITNESS FOR A PARTICULAR
                                PURPOSE AND NON-INFRINGEMENT ARE
    7    00000000              ;- DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE
                                FOR ANY DIRECT, INDIRECT,
    8    00000000              ;- INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENT
                               IAL DAMAGES (INCLUDING, BUT NOT
    9    00000000              ;- LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
                                OR SERVICES; LOSS OF USE, DATA,
   10    00000000              ;- OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                                CAUSED AND ON ANY THEORY OF
   11    00000000              ;- LIABILITY, WHETHER IN CONTRACT, STRICT
                                LIABILITY, OR TORT (INCLUDING
   12    00000000              ;- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
                                OUT OF THE USE OF THIS SOFTWARE,
   13    00000000              ;- EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
                                DAMAGE.
   14    00000000              ;-----------------------------------------------
                               -------------------------------
   15    00000000              ;- File source          : Cstartup.s79
   16    00000000              ;- Object               : Generic CStartup to
                                AT91SAM7SE512
   17    00000000              ;- 1.0 09/May/06 JPP    : Creation
   18    00000000              ;-----------------------------------------------
                               -------------------------------
   19    00000000              
   20    00000000              ;-----------------------------------------------
                               -------------------------------
   21    00000000              ; Include your AT91 Library files
   22    00000000              ;-----------------------------------------------
                               -------------------------------
   23    00000000              #include "include/AT91SAM7SE512_inc.h"
   24    00000000              ;-----------------------------------------------
                               -------------------------------
   25    00000000              
   26    00000000              ;-----------------------------------------------
                               -------------------------------
   27    00000000              ; ?RESET
   28    00000000              ; Reset Vector.
   29    00000000              ; Normally, segment INTVEC is linked at address
                                0.
   30    00000000              ; For debugging purposes, INTVEC may be placed
                                at other addresses.
   31    00000000              ; A debugger that honors the entry point will
                                start the
   32    00000000              ; program in a normal way even if INTVEC is not
                                at address 0.
   33    00000000              ;-----------------------------------------------
                               -------------------------------
   34    00000000              
   35    00000000                  PROGRAM     ?RESET              ;- Begins a
                                program module
   36    00000000                  RSEG        INTRAMEND_REMAP     ;- Begins a
                                relocatable segment
   37    00000000                  RSEG        ICODE:CODE (2)      ;- Begins a
                                relocatable segment 
   38    00000000                                                  ; correspond
                               ing address is 32-bit aligned
   39    00000000                  CODE32                          ;- Always
                                ARM mode after reset      
   40    00000000                  ORG 0                           ;- Sets the
                                                                    location
                                                                    counter
   41    00000000                                                  ; correspond
                               s to the RESET vector address
   42    00000000              
   43    00000000              ;-----------------------------------------------
                               -------------------------------
   44    00000000              ;- Exception vectors
   45    00000000              ;-----------------------------------------------
                               -------------------------------
   46    00000000              ;- These vectors can be read at address 0 or at
                                RAM address
   47    00000000              ;- They ABSOLUTELY requires to be in relative
                                addresssing mode in order to
   48    00000000              ;- guarantee a valid jump. For the moment, all
                                are just looping.
   49    00000000              ;- If an exception occurs before remap, this
                                would result in an infinite loop.
   50    00000000              ;- To ensure if a exeption occurs before start
                                application to infinite loop.
   51    00000000              ;-----------------------------------------------
                               -------------------------------
   52    00000000              reset
   53    00000000 210000EA                     B           InitReset          
  ; 0x00 Reset handler
   54    00000004              undefvec:
   55    00000004 FEFFFFEA                     B           undefvec           
  ; 0x04 Undefined Instruction
   56    00000008              swivec:
   57    00000008 FEFFFFEA                     B           swivec             
  ; 0x08 Software Interrupt
   58    0000000C              pabtvec:
   59    0000000C FEFFFFEA                     B           pabtvec            
  ; 0x0C Prefetch Abort
   60    00000010              dabtvec:
   61    00000010 FEFFFFEA                     B           dabtvec            
  ; 0x10 Data Abort
   62    00000014              rsvdvec:
   63    00000014 FEFFFFEA                     B           rsvdvec            
  ; 0x14 reserved
   64    00000018              irqvec:
   65    00000018 090000EA                     B           IRQ_Handler_Entry  
  ; 0x18 IRQ
   66    0000001C                                                     
                                
   67    0000001C              fiqvec:                                        
                                ; 0x1c FIQ
   68    0000001C              ;-----------------------------------------------
                               -------------------------------
   69    0000001C              ;- Function             : FIQ_Handler_Entry
   70    0000001C              ;- Treatments           : FIQ Controller
                                Interrupt Handler.
   71    0000001C              ;-                        R8 is initialize in
                                Cstartup
   72    0000001C              ;- Called Functions     : None only by
                                FIQ
   73    0000001C              ;-----------------------------------------------
                               -------------------------------
   74    0000001C              FIQ_Handler_Entry:
   75    0000001C              
   76    0000001C              ;- Switch in SVC/User Mode to allow User Stack
                                access for C code
   77    0000001C              ; because the FIQ is not yet acknowledged
   78    0000001C              
   79    0000001C              ;- Save and r0 in FIQ_Register
   80    0000001C 0090A0E1             mov         r9,r0
   81    00000020 040198E5             ldr         r0 , [r8, #AIC_FVR]
   82    00000024 D3F021E3             msr         CPSR_c,#I_BIT | F_BIT |
                                                           ARM_MODE_SVC
   83    00000028              ;- Save scratch/used registers and LR in User
                                Stack
   84    00000028 0E502DE9             stmfd       sp!, { r1-r3, r12,
                                                       lr}
   85    0000002C              
   86    0000002C              ;- Branch to the routine pointed by the
                                AIC_FVR
   87    0000002C 0FE0A0E1             mov         r14, pc
   88    00000030 10FF2FE1             bx          r0
   89    00000034              
   90    00000034              ;- Restore scratch/used registers and LR from
                                User Stack
   91    00000034 0E50BDE8             ldmia       sp!, { r1-r3, r12,
                                                       lr}
   92    00000038              
   93    00000038              ;- Leave Interrupts disabled and switch back in
                                FIQ mode
   94    00000038 D1F021E3             msr         CPSR_c, #I_BIT | F_BIT |
                                                            ARM_MODE_FIQ
   95    0000003C              
   96    0000003C              ;- Restore the R0 ARM_MODE_SVC register
   97    0000003C 0900A0E1             mov         r0,r9
   98    00000040              
   99    00000040              ;- Restore the Program Counter using the LR_fiq
                                directly in the PC
  100    00000040 04F05EE2             subs        pc,lr,#4
  101    00000044              
  102    00000044              ;-----------------------------------------------
                               -------------------------------
  103    00000044              ;- Manage exception: The exception must be
                                ensure in ARM mode
  104    00000044              ;-----------------------------------------------
                               -------------------------------
  105    00000044              ;-----------------------------------------------
                               -------------------------------
  106    00000044              ;- Function             : IRQ_Handler_Entry
  107    00000044              ;- Treatments           : IRQ Controller
                                Interrupt Handler.
  108    00000044              ;- Called Functions     : None By IRQ interrupt
                                
  109    00000044              ;-----------------------------------------------
                               -------------------------------
  110    00000044              IRQ_Handler_Entry:
  111    00000044              
  112    00000044              ;-------------------------
  113    00000044              ;- Manage Exception Entry
  114    00000044              ;-------------------------
  115    00000044              ;- Adjust and save LR_irq in IRQ stack
  116    00000044 04E04EE2             sub         lr, lr, #4
  117    00000048 00402DE9             stmfd       sp!, {lr}
  118    0000004C              
  119    0000004C              ;- Save r0 and SPSR (need to be saved for nested
                                interrupt)
  120    0000004C 00E04FE1             mrs         r14, SPSR
  121    00000050 01402DE9             stmfd       sp!, {r0,r14}
  122    00000054              
  123    00000054              ;- Write in the IVR to support Protect
                                Mode
  124    00000054              ;- No effect in Normal Mode
  125    00000054              ;- De-assert the NIRQ and clear the source in
                                Protect Mode
  126    00000054 88E09FE5             ldr         r14, =AT91C_BASE_AIC
  127    00000058 00019EE5             ldr         r0 , [r14, #AIC_IVR]
  128    0000005C 00E18EE5             str         r14, [r14, #AIC_IVR]
  129    00000060              
  130    00000060              ;- Enable Interrupt and Switch in Supervisor
                                Mode
  131    00000060 13F021E3             msr         CPSR_c, #ARM_MODE_SVC
  132    00000064              
  133    00000064              ;- Save scratch/used registers and LR in User
                                Stack
  134    00000064 0E502DE9             stmfd       sp!, { r1-r3, r12,
                                                       r14}
  135    00000068              
  136    00000068              ;----------------------------------------------
  137    00000068              ;- Branch to the routine pointed by the
                                AIC_IVR
  138    00000068              ;----------------------------------------------
  139    00000068 0FE0A0E1             mov         r14, pc
  140    0000006C 10FF2FE1             bx          r0
  141    00000070              
  142    00000070              ;----------------------------------------------
  143    00000070              ;- Manage Exception Exit
  144    00000070              ;----------------------------------------------
  145    00000070              ;- Restore scratch/used registers and LR from
                                User Stack
  146    00000070 0E50BDE8             ldmia       sp!, { r1-r3, r12,
                                                       r14}
  147    00000074              
  148    00000074              ;- Disable Interrupt and switch back in IRQ
                                mode
  149    00000074 92F021E3             msr         CPSR_c, #I_BIT | ARM_MODE_IR
                                                           Q
  150    00000078              
  151    00000078              ;- Mark the End of Interrupt on the AIC
  152    00000078 64E09FE5             ldr         r14, =AT91C_BASE_AIC
  153    0000007C 30E18EE5             str         r14, [r14, #AIC_EOICR]
  154    00000080              
  155    00000080              ;- Restore SPSR_irq and r0 from IRQ stack
  156    00000080 0140BDE8             ldmia       sp!, {r0,r14}
  157    00000084 0EF06FE1             msr         SPSR_cxsf, r14
  158    00000088              
  159    00000088              ;- Restore adjusted  LR_irq from IRQ stack
                                directly in the PC
  160    00000088 0080FDE8             ldmia       sp!, {pc}^
  161    0000008C              
  162    0000008C              
  163    0000008C              InitReset:
  164    0000008C              ;-----------------------------------------------
                               -------------------------------
  165    0000008C              ;- Low level Init is performed in a C function:
                                AT91F_LowLevelInit
  166    0000008C              ;- Init Stack Pointer to a valid memory area
                                before calling AT91F_LowLevelInit
  167    0000008C              ;-----------------------------------------------
                               -------------------------------
  168    0000008C              
  169    0000008C              ;- Retrieve end of RAM address
  170    0000008C              __iramend EQU SFB(INTRAMEND_REMAP)      ;-
                                Segment begin
  171    0000008C              
  172    00000000                      EXTERN   AT91F_LowLevelInit
  173    0000008C              ;- Temporary stack in internal RAM for Low Level
                                Init execution    
  174    0000008C 54D09FE5             ldr     r13,=__iramend             
                                                    
  175    00000090 54009FE5             ldr     r0,=AT91F_LowLevelInit
  176    00000094 0FE0A0E1             mov     lr, pc
  177    00000098 10FF2FE1             bx      r0                      ;-
                                                                        Branch
                                                                        on C
                                                                        functio
                                                                       n
                                                                        (interw
                                                                       orking)
  178    0000009C              
  179    0000009C              ;-----------------------------------------------
                               -------------------------------
  180    0000009C              ;- Top of Stack Definition
  181    0000009C              ;-----------------------------------------------
                               -------------------------------
  182    0000009C              ;- Interrupt and Supervisor Stack are located at
                                the top of internal memory in
  183    0000009C              ;- order to speed the exception handling context
                                saving and restoring.
  184    0000009C              ;- ARM_MODE_SVC (Application, C) Stack is
                                located at the top of the external 
  185    0000009C              ;- memory.
  186    0000009C              ;-----------------------------------------------
                               -------------------------------
  187    0000009C              ; IRQ_STACK_SIZE = 3 words to be saved per
                                interrupt priority level
  188    00000060              IRQ_STACK_SIZE          EQU     (3*8*4) 
                                
  189    00000011              ARM_MODE_FIQ            EQU     0x11
  190    00000012              ARM_MODE_IRQ            EQU     0x12
  191    00000013              ARM_MODE_SVC            EQU     0x13
  192    00000080              I_BIT                   EQU     0x80
  193    00000040              F_BIT                   EQU     0x40
  194    0000009C              
  195    0000009C              ;-----------------------------------------------
                               -------------------------------
  196    0000009C              ;- Setup the stack for each mode
  197    0000009C              ;-----------------------------------------------
                               -------------------------------
  198    0000009C 44009FE5             ldr     r0, =__iramend
  199    000000A0              
  200    000000A0              ;- Set up Fast Interrupt Mode and set FIQ Mode
                                Stack
  201    000000A0 D1F021E3             msr     CPSR_c, #ARM_MODE_FIQ | I_BIT |
                                                        F_BIT
  202    000000A4              ;- Init the FIQ register
  203    000000A4 38809FE5             ldr     r8, =AT91C_BASE_AIC
  204    000000A8              
  205    000000A8              ;- Set up Interrupt Mode and set IRQ Mode
                                Stack
  206    000000A8 D2F021E3             msr     CPSR_c, #ARM_MODE_IRQ | I_BIT |
                                                        F_BIT
  207    000000AC 00D0A0E1             mov     r13, r0                     ;
                                                     Init stack IRQ
  208    000000B0 600040E2             sub     r0, r0, #IRQ_STACK_SIZE
  209    000000B4              
  210    000000B4              ;- Enable interrupt & Set up Supervisor Mode and
                                set Supervisor Mode Stack
  211    000000B4 13F021E3             msr     CPSR_c, #ARM_MODE_SVC
  212    000000B8 00D0A0E1             mov     r13, r0
  213    000000BC              
  214    000000BC              ;-----------------------------------------------
                               -------------------------------
  215    000000BC              ; Initialize segments.
  216    000000BC              ;-----------------------------------------------
                               -------------------------------
  217    000000BC              ; __segment_init is assumed to use
  218    000000BC              ; instruction set and to be reachable by BL from
                                the ICODE segment
  219    000000BC              ; (it is safest to link them in segment
                                ICODE).
  220    000000BC              ;-----------------------------------------------
                               -------------------------------
  221    00000000                      EXTERN  __segment_init
  222    000000BC 2C009FE5             ldr     r0,=__segment_init
  223    000000C0 0FE0A0E1             mov     lr, pc
  224    000000C4 10FF2FE1             bx      r0                      ;-
                                                                        Branch
                                                                        on C
                                                                        functio
                                                                       n
                                                                        (interw
                                                                       orking)
  225    000000C8              
  226    000000C8              ;-----------------------------------------------
                               -------------------------------
  227    000000C8              ;- Branch on C code Main function (with
                                interworking)
  228    000000C8              ;-----------------------------------------------
                               -------------------------------
  229    00000000                      EXTERN  main
  230    00000000                      PUBLIC  __main
  231    000000C8              ?jump_to_main:
  232    000000C8 24E09FE5             ldr     lr,=?call_exit
  233    000000CC 24009FE5             ldr     r0,=main
  234    000000D0              __main:
  235    000000D0 10FF2FE1             bx      r0                      ;-
                                                                        Branch
                                                                        on C
                                                                        functio
                                                                       n
                                                                        (interw
                                                                       orking)
  236    000000D4              
  237    000000D4              ;-----------------------------------------------
                               -------------------------------
  238    000000D4              ;- Loop for ever
  239    000000D4              ;-----------------------------------------------
                               -------------------------------
  240    000000D4              ;- End of application. Normally, never
                                occur.
  241    000000D4              ;- Could jump on Software Reset ( b reset).
  242    000000D4              ;-----------------------------------------------
                               -------------------------------
  243    000000D4              ?call_exit:
  244    000000D4              End
  245    000000D4 FEFFFFEA             b       End
  246    000000D8              
  247    000000D8              ;-----------------------------------------------
                               -------------------------------
  248    000000D8              ;- Exception Vectors
  249    000000D8              ;-----------------------------------------------
                               -------------------------------
  250    00000000                      PUBLIC    AT91F_Default_FIQ_handler
  251    00000000                      PUBLIC    AT91F_Default_IRQ_handler
  252    00000000                      PUBLIC    AT91F_Spurious_handler
  253    000000D8              
  254    000000D8                      CODE32      ; Always ARM mode after
                                exeption
  255    000000D8              
  256    000000D8              AT91F_Default_FIQ_handler
  257    000000D8 FEFFFFEA             b         AT91F_Default_FIQ_handler
  258    000000DC              
  259    000000DC              AT91F_Default_IRQ_handler
  260    000000DC FEFFFFEA             b         AT91F_Default_IRQ_handler
  261    000000E0              
  262    000000E0              AT91F_Spurious_handler
  263    000000E0 FEFFFFEA             b         AT91F_Spurious_handler
  264    000000E4              
  265    000000E4                      ENDMOD      ;- Terminates the assembly
                                of the current module
  265.1  000000E4                       TABLE
  265.2  000000E4 00F0FFFF             Reference on line 126,152,203 
  265.3  000000E8 ........             Reference on line 174,198 
  265.4  000000EC ........             Reference on line 175 
  265.5  000000F0 ........             Reference on line 222 
  265.6  000000F4 ........             Reference on line 232 
  265.7  000000F8 ........             Reference on line 233 
  265    000000FC                      ENDMOD      ;- Terminates the assembly
                                of the current module
##############################
#          CRC:6020          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 252         #
##############################



##############################
#          CRC:6020          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 252         #
##############################



