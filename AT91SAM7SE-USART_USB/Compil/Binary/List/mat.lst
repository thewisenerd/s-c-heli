##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.31A/W32 EVALUATION    01/Mar/2008  10:19:35 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  F:\airplane\arm\atmel\AT91SAM7SE512_IAR\AT91SAM7SE51 #
#                       2-USART_USB-IAR4_31A-1_00\kalman\mat.c               #
#    Command line    =  F:\airplane\arm\atmel\AT91SAM7SE512_IAR\AT91SAM7SE51 #
#                       2-USART_USB-IAR4_31A-1_00\kalman\mat.c -lC           #
#                       F:\airplane\arm\atmel\AT91SAM7SE512_IAR\AT91SAM7SE51 #
#                       2-USART_USB-IAR4_31A-1_00\AT91SAM7SE-USART_USB\Compi #
#                       l\Binary\List\ -o F:\airplane\arm\atmel\AT91SAM7SE51 #
#                       2_IAR\AT91SAM7SE512-USART_USB-IAR4_31A-1_00\AT91SAM7 #
#                       SE-USART_USB\Compil\Binary\Obj\ -z9 --debug          #
#                       --cpu_mode thumb --endian little --cpu ARM7TDMI      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\Program Files\IAR                  #
#                       Systems\Embedded Workbench 4.0                       #
#                       Evaluation\ARM\LIB\dl4tptinl8n.h" -I                 #
#                       F:\airplane\arm\atmel\AT91SAM7SE512_IAR\AT91SAM7SE51 #
#                       2-USART_USB-IAR4_31A-1_00\AT91SAM7SE-USART_USB\Compi #
#                       l\srcIAR\ -I F:\airplane\arm\atmel\AT91SAM7SE512_IAR #
#                       \AT91SAM7SE512-USART_USB-IAR4_31A-1_00\AT91SAM7SE-US #
#                       ART_USB\Compil\..\src\ -I                            #
#                       F:\airplane\arm\atmel\AT91SAM7SE512_IAR\AT91SAM7SE51 #
#                       2-USART_USB-IAR4_31A-1_00\AT91SAM7SE-USART_USB\Compi #
#                       l\..\..\ -I F:\airplane\arm\atmel\AT91SAM7SE512_IAR\ #
#                       AT91SAM7SE512-USART_USB-IAR4_31A-1_00\AT91SAM7SE-USA #
#                       RT_USB\Compil\..\..\kalman\ -I                       #
#                       F:\airplane\arm\atmel\AT91SAM7SE512_IAR\AT91SAM7SE51 #
#                       2-USART_USB-IAR4_31A-1_00\AT91SAM7SE-USART_USB\Compi #
#                       l\..\..\pcm\ -I F:\airplane\arm\atmel\AT91SAM7SE512_ #
#                       IAR\AT91SAM7SE512-USART_USB-IAR4_31A-1_00\AT91SAM7SE #
#                       -USART_USB\Compil\..\..\spi\ -I "C:\Program          #
#                       Files\IAR Systems\Embedded Workbench 4.0             #
#                       Evaluation\ARM\INC\"                                 #
#    List file       =  F:\airplane\arm\atmel\AT91SAM7SE512_IAR\AT91SAM7SE51 #
#                       2-USART_USB-IAR4_31A-1_00\AT91SAM7SE-USART_USB\Compi #
#                       l\Binary\List\mat.lst                                #
#    Object file     =  F:\airplane\arm\atmel\AT91SAM7SE512_IAR\AT91SAM7SE51 #
#                       2-USART_USB-IAR4_31A-1_00\AT91SAM7SE-USART_USB\Compi #
#                       l\Binary\Obj\mat.r79                                 #
#                                                                            #
#                                                                            #
##############################################################################

F:\airplane\arm\atmel\AT91SAM7SE512_IAR\AT91SAM7SE512-USART_USB-IAR4_31A-1_00\kalman\mat.c
      1          #include<includs.h>
      2          

   \                                 In segment CODE, align 4, keep-with-next
      3          void norm( float* q )
      4          {
   \                     norm:
   \   00000000   F0B5               PUSH        {R4-R7,LR}
   \   00000002   041C               MOV         R4,R0
      5          	unsigned char i;
      6          	float mag = 0;
   \   00000004   0026               MOV         R6,#+0
      7          				
      8          	for( i=0; i<4; i++ ){
   \   00000006   0025               MOV         R5,#+0
   \   00000008   371C               MOV         R7,R6
      9          		mag += q[i] * q[i];
   \                     ??norm_0:
   \   0000000A   B800               LSL         R0,R7,#+2
   \   0000000C   2118               ADD         R1,R4,R0
   \   0000000E   0868               LDR         R0,[R1, #+0]
   \   00000010   011C               MOV         R1,R0
   \   00000012   ........           _BLF        __fMul,??__fMul??rT
   \   00000016   311C               MOV         R1,R6
   \   00000018   ........           _BLF        __fAdd,??__fAdd??rT
   \   0000001C   061C               MOV         R6,R0
     10          	}
   \   0000001E   7F1C               ADD         R7,R7,#+1
   \   00000020   3806               LSL         R0,R7,#+24
   \   00000022   000E               LSR         R0,R0,#+24
   \   00000024   0428               CMP         R0,#+4
   \   00000026   F0D3               BCC         ??norm_0
     11          	
     12          	mag = sqrt( mag );
   \   00000028   301C               MOV         R0,R6
   \   0000002A   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   0000002E   ........           _BLF        sqrt,??sqrt??rT
   \   00000032   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   00000036   061C               MOV         R6,R0
     13          					
     14          	for( i=0; i<4; i++ ){
     15          		q[i] = q[i] / mag;
   \                     ??norm_1:
   \   00000038   A800               LSL         R0,R5,#+2
   \   0000003A   2718               ADD         R7,R4,R0
   \   0000003C   3868               LDR         R0,[R7, #+0]
   \   0000003E   311C               MOV         R1,R6
   \   00000040   ........           _BLF        __fDiv,??__fDiv??rT
   \   00000044   3860               STR         R0,[R7, #+0]
     16          	}
   \   00000046   6D1C               ADD         R5,R5,#+1
   \   00000048   2806               LSL         R0,R5,#+24
   \   0000004A   000E               LSR         R0,R0,#+24
   \   0000004C   0428               CMP         R0,#+4
   \   0000004E   F3D3               BCC         ??norm_1
     17          }
   \   00000050   ....               B           ??Subroutine12_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine12:
   \   00000000   B060               STR         R0,[R6, #+8]
   \                     ??Subroutine12_0:
   \   00000002   F0BC               POP         {R4-R7}
   \   00000004   01BC               POP         {R0}
   \   00000006   0047               BX          R0                 ;; return
     18          
     19          /**********************************************************/
     20          /**********************************************************/
     21          
     22          static inline float limit( const float f,const float min,const float max)
     23          {
     24          		if( f < min ) return min;
     25          			
     26          		if( f > max ) return max;
     27          
     28          		return f;
     29          }
     30          
     31          /*********************************************************/
     32          /*********************************************************/
     33          

   \                                 In segment CODE, align 4, keep-with-next
     34          void rad2deg( double* degree, double* rad, unsigned char index )
     35          {
   \                     rad2deg:
   \   00000000   F1B5               PUSH        {R0,R4-R7,LR}
   \   00000002   0F1C               MOV         R7,R1
   \   00000004   161C               MOV         R6,R2
     36          	unsigned char i;
     37          
     38          	for( i=0; i<index; i++ ){
   \   00000006   0024               MOV         R4,#+0
   \   00000008   0EE0               B           ??rad2deg_0
     39          	       degree[ i ] = rad[ i ] * 180.0 / PI;
   \                     ??rad2deg_1:
   \   0000000A   E000               LSL         R0,R4,#+3
   \   0000000C   0099               LDR         R1,[SP, #+0]
   \   0000000E   0D18               ADD         R5,R1,R0
   \   00000010   3818               ADD         R0,R7,R0
   \   00000012   0CC8               LDMIA       R0!,{R2,R3}
   \   00000014   0020               MOV         R0,#+0
   \   00000016   0849               LDR         R1,??rad2deg_2     ;; 0x40668000
   \   00000018   ........           _BLF        __dMul,??__dMul??rT
   \   0000001C   074A               LDR         R2,??rad2deg_2+0x4  ;; 0x4d12d84a
   \   0000001E   084B               LDR         R3,??rad2deg_2+0x8  ;; 0x400921fb
   \   00000020   ........           _BLF        __dDiv,??__dDiv??rT
   \   00000024   03C5               STMIA       R5!,{R0,R1}
     40          	}
   \   00000026   641C               ADD         R4,R4,#+1
   \                     ??rad2deg_0:
   \   00000028   2006               LSL         R0,R4,#+24
   \   0000002A   000E               LSR         R0,R0,#+24
   \   0000002C   B042               CMP         R0,R6
   \   0000002E   ECD3               BCC         ??rad2deg_1
     41          
     42          }	
   \   00000030   F8BC               POP         {R3-R7}
   \   00000032   01BC               POP         {R0}
   \   00000034   0047               BX          R0                 ;; return
   \   00000036   C046               NOP         
   \                     ??rad2deg_2:
   \   00000038   00806640           DC32        0x40668000
   \   0000003C   4AD8124D           DC32        0x4d12d84a
   \   00000040   FB210940           DC32        0x400921fb
     43          
     44          /**********************************************************/
     45          /**********************************************************/

   \                                 In segment CODE, align 4, keep-with-next
     46          float compass_heading( float* euler, float * compass )
     47          {	
   \                     compass_heading:
   \   00000000   F2B5               PUSH        {R1,R4-R7,LR}
   \   00000002   8CB0               SUB         SP,#+48
   \   00000004   011C               MOV         R1,R0
     48          	float compass_calib[2];
     49          	float yaw;
     50          
     51                  float   phi = euler[1];
   \   00000006   4068               LDR         R0,[R0, #+4]
     52                  float theta = euler[0];
   \   00000008   0E68               LDR         R6,[R1, #+0]
     53          
     54                  compass_calib[0] = compass[0]*cos(phi) + compass[1]*sin(theta)*sin(phi) - compass[2]*cos(theta)*sin(phi);
   \   0000000A   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   0000000E   041C               MOV         R4,R0
   \   00000010   0D1C               MOV         R5,R1
   \   00000012   0122               MOV         R2,#+1
   \   00000014   ........           _BLF        _Sin,??_Sin??rT
   \   00000018   06AA               ADD         R2,SP,#+24
   \   0000001A   03C2               STMIA       R2!,{R0,R1}
   \   0000001C   02AF               ADD         R7,SP,#+8
   \   0000001E   301C               MOV         R0,R6
   \   00000020   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   00000024   03C7               STMIA       R7!,{R0,R1}
   \   00000026   0022               MOV         R2,#+0
   \   00000028   02A8               ADD         R0,SP,#+8
   \   0000002A   03C8               LDMIA       R0!,{R0,R1}
   \   0000002C   ........           _BLF        _Sin,??_Sin??rT
   \   00000030   08AA               ADD         R2,SP,#+32
   \   00000032   03C2               STMIA       R2!,{R0,R1}
   \   00000034   0022               MOV         R2,#+0
   \   00000036   201C               MOV         R0,R4
   \   00000038   291C               MOV         R1,R5
   \   0000003A   ........           _BLF        _Sin,??_Sin??rT
   \   0000003E   0AAA               ADD         R2,SP,#+40
   \   00000040   03C2               STMIA       R2!,{R0,R1}
   \   00000042   0122               MOV         R2,#+1
   \   00000044   02A8               ADD         R0,SP,#+8
   \   00000046   03C8               LDMIA       R0!,{R0,R1}
   \   00000048   ........           _BLF        _Sin,??_Sin??rT
   \   0000004C   04AA               ADD         R2,SP,#+16
   \   0000004E   03C2               STMIA       R2!,{R0,R1}
   \   00000050   0022               MOV         R2,#+0
   \   00000052   201C               MOV         R0,R4
   \   00000054   291C               MOV         R1,R5
   \   00000056   ........           _BLF        _Sin,??_Sin??rT
   \   0000005A   041C               MOV         R4,R0
   \   0000005C   0D1C               MOV         R5,R1
   \   0000005E   0C98               LDR         R0,[SP, #+48]
   \   00000060   8068               LDR         R0,[R0, #+8]
   \   00000062   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   00000066   04AA               ADD         R2,SP,#+16
   \   00000068   0CCA               LDMIA       R2!,{R2,R3}
   \   0000006A   ........           _BLF        __dMul,??__dMul??rT
   \   0000006E   221C               MOV         R2,R4
   \   00000070   2B1C               MOV         R3,R5
   \   00000072   ........           _BLF        __dMul,??__dMul??rT
   \   00000076   061C               MOV         R6,R0
   \   00000078   0F1C               MOV         R7,R1
   \   0000007A   0C98               LDR         R0,[SP, #+48]
   \   0000007C   4068               LDR         R0,[R0, #+4]
   \   0000007E   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   00000082   08AA               ADD         R2,SP,#+32
   \   00000084   0CCA               LDMIA       R2!,{R2,R3}
   \   00000086   ........           _BLF        __dMul,??__dMul??rT
   \   0000008A   0AAA               ADD         R2,SP,#+40
   \   0000008C   0CCA               LDMIA       R2!,{R2,R3}
   \   0000008E   ........           _BLF        __dMul,??__dMul??rT
   \   00000092   041C               MOV         R4,R0
   \   00000094   0D1C               MOV         R5,R1
   \   00000096   0C98               LDR         R0,[SP, #+48]
   \   00000098   0068               LDR         R0,[R0, #+0]
   \   0000009A   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   0000009E   021C               MOV         R2,R0
   \   000000A0   0B1C               MOV         R3,R1
   \   000000A2   06A8               ADD         R0,SP,#+24
   \   000000A4   03C8               LDMIA       R0!,{R0,R1}
   \   000000A6   ........           _BLF        __dMul,??__dMul??rT
   \   000000AA   221C               MOV         R2,R4
   \   000000AC   2B1C               MOV         R3,R5
   \   000000AE   ........           _BLF        __dAdd,??__dAdd??rT
   \   000000B2   321C               MOV         R2,R6
   \   000000B4   3B1C               MOV         R3,R7
   \   000000B6   ........           _BLF        __dSub,??__dSub??rT
   \   000000BA   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   000000BE   0090               STR         R0,[SP, #+0]
     55                  compass_calib[1] = compass[1]*cos(theta) + compass[2]*sin(theta);
   \   000000C0   0122               MOV         R2,#+1
   \   000000C2   02A8               ADD         R0,SP,#+8
   \   000000C4   03C8               LDMIA       R0!,{R0,R1}
   \   000000C6   ........           _BLF        _Sin,??_Sin??rT
   \   000000CA   04AA               ADD         R2,SP,#+16
   \   000000CC   03C2               STMIA       R2!,{R0,R1}
   \   000000CE   0022               MOV         R2,#+0
   \   000000D0   02A8               ADD         R0,SP,#+8
   \   000000D2   03C8               LDMIA       R0!,{R0,R1}
   \   000000D4   ........           _BLF        _Sin,??_Sin??rT
   \   000000D8   041C               MOV         R4,R0
   \   000000DA   0D1C               MOV         R5,R1
   \   000000DC   0C98               LDR         R0,[SP, #+48]
   \   000000DE   8068               LDR         R0,[R0, #+8]
   \   000000E0   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   000000E4   221C               MOV         R2,R4
   \   000000E6   2B1C               MOV         R3,R5
   \   000000E8   ........           _BLF        __dMul,??__dMul??rT
   \   000000EC   041C               MOV         R4,R0
   \   000000EE   0D1C               MOV         R5,R1
   \   000000F0   0C98               LDR         R0,[SP, #+48]
   \   000000F2   4068               LDR         R0,[R0, #+4]
   \   000000F4   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   000000F8   04AA               ADD         R2,SP,#+16
   \   000000FA   0CCA               LDMIA       R2!,{R2,R3}
   \   000000FC   ........           _BLF        __dMul,??__dMul??rT
   \   00000100   221C               MOV         R2,R4
   \   00000102   2B1C               MOV         R3,R5
   \   00000104   ........           _BLF        __dAdd,??__dAdd??rT
   \   00000108   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   0000010C   0190               STR         R0,[SP, #+4]
     56          
     57          	if( compass_calib[0] != 0)   {
   \   0000010E   0099               LDR         R1,[SP, #+0]
   \   00000110   0020               MOV         R0,#+0
   \   00000112   ........           _BLF        __fNotEqual,??__fNotEqual??rT
   \   00000116   0028               CMP         R0,#+0
   \   00000118   0ED0               BEQ         ??compass_heading_0
     58          		yaw = atan2( compass_calib[1], compass_calib[0] );
   \   0000011A   0098               LDR         R0,[SP, #+0]
   \   0000011C   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   00000120   041C               MOV         R4,R0
   \   00000122   0D1C               MOV         R5,R1
   \   00000124   0198               LDR         R0,[SP, #+4]
   \   00000126   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   0000012A   221C               MOV         R2,R4
   \   0000012C   2B1C               MOV         R3,R5
   \   0000012E   ........           _BLF        atan2,??atan2??rT
   \   00000132   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   00000136   08E0               B           ??compass_heading_1
     59          	}else if ( compass_calib[1] < 0 ) {
   \                     ??compass_heading_0:
   \   00000138   0198               LDR         R0,[SP, #+4]
   \   0000013A   0021               MOV         R1,#+0
   \   0000013C   ........           _BLF        __fLess,??__fLess??rT
   \   00000140   0028               CMP         R0,#+0
   \   00000142   01D0               BEQ         ??compass_heading_2
     60          		yaw = PI * 3.0 /2.0;
   \   00000144   0348               LDR         R0,??compass_heading_3  ;; 0x4096cbe4
   \   00000146   00E0               B           ??compass_heading_1
     61          	}else{
     62          	       	yaw = PI / 2.0;
   \                     ??compass_heading_2:
   \   00000148   0348               LDR         R0,??compass_heading_3+0x4  ;; 0x3fc90fda
     63          	}
     64          
     65          	return  yaw;
   \                     ??compass_heading_1:
   \   0000014A   0DB0               ADD         SP,#+52
   \   0000014C   F0BC               POP         {R4-R7}
   \   0000014E   02BC               POP         {R1}
   \   00000150   0847               BX          R1                 ;; return
   \   00000152   C046               NOP         
   \                     ??compass_heading_3:
   \   00000154   E4CB9640           DC32        0x4096cbe4
   \   00000158   DA0FC93F           DC32        0x3fc90fda
     66          }
     67          /**********************************************************************/
     68          /**********************************************************************/

   \                                 In segment DATA_Z, align 1, align-sorted
     69          unsigned char update_flag = 0;
   \                     update_flag:
   \   00000000                      DS8 1
     70          

   \                                 In segment CODE, align 4, keep-with-next
     71          void accel2euler( float* THETAm, const float* accel, float * compass  )
     72          {
   \                     accel2euler:
   \   00000000   F0B5               PUSH        {R4-R7,LR}
   \   00000002   061C               MOV         R6,R0
   \   00000004   0C1C               MOV         R4,R1
   \   00000006   171C               MOV         R7,R2
     73          
     74          	float g;
     75          
     76          	g = sqrt( accel[0]*accel[0] + accel[1]*accel[1] + accel[2]*accel[2] );
   \   00000008   8968               LDR         R1,[R1, #+8]
   \   0000000A   081C               MOV         R0,R1
   \   0000000C   ........           _BLF        __fMul,??__fMul??rT
   \   00000010   011C               MOV         R1,R0
   \   00000012   02B4               PUSH        {R1}
   \   00000014   6168               LDR         R1,[R4, #+4]
   \   00000016   081C               MOV         R0,R1
   \   00000018   ........           _BLF        __fMul,??__fMul??rT
   \   0000001C   051C               MOV         R5,R0
   \   0000001E   2168               LDR         R1,[R4, #+0]
   \   00000020   081C               MOV         R0,R1
   \   00000022   ........           _BLF        __fMul,??__fMul??rT
   \   00000026   291C               MOV         R1,R5
   \   00000028   ........           _BLF        __fAdd,??__fAdd??rT
   \   0000002C   02BC               POP         {R1}
   \   0000002E   ........           _BLF        __fAdd,??__fAdd??rT
   \   00000032   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   00000036   ........           _BLF        sqrt,??sqrt??rT
   \   0000003A   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   0000003E   051C               MOV         R5,R0
     77          	
     78          	THETAm[0] =  atan2(   accel[ 1 ],  accel[ 2 ] );
   \   00000040   A068               LDR         R0,[R4, #+8]
   \   00000042   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   00000046   021C               MOV         R2,R0
   \   00000048   0B1C               MOV         R3,R1
   \   0000004A   0CB4               PUSH        {R2,R3}
   \   0000004C   6068               LDR         R0,[R4, #+4]
   \   0000004E   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   00000052   0CBC               POP         {R2,R3}
   \   00000054   ........           _BLF        atan2,??atan2??rT
   \   00000058   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   0000005C   3060               STR         R0,[R6, #+0]
     79          
     80          	THETAm[1] =  -asin( limit( -accel[ 0 ] / g, -1, 1 ) );   
   \   0000005E   2068               LDR         R0,[R4, #+0]
   \   00000060   291C               MOV         R1,R5
   \   00000062   ........           _BLF        __fDiv,??__fDiv??rT
   \   00000066   041C               MOV         R4,R0
   \   00000068   8020               MOV         R0,#+128
   \   0000006A   0006               LSL         R0,R0,#+24         ;; #-2147483648
   \   0000006C   4440               EOR         R4,R0
   \   0000006E   104D               LDR         R5,??accel2euler_0  ;; 0xbf800000
   \   00000070   201C               MOV         R0,R4
   \   00000072   291C               MOV         R1,R5
   \   00000074   ........           _BLF        __fLess,??__fLess??rT
   \   00000078   0028               CMP         R0,#+0
   \   0000007A   01D0               BEQ         ??accel2euler_1
   \   0000007C   2C1C               MOV         R4,R5
   \   0000007E   07E0               B           ??accel2euler_2
   \                     ??accel2euler_1:
   \   00000080   201C               MOV         R0,R4
   \   00000082   0C49               LDR         R1,??accel2euler_0+0x4  ;; 0x3f800001
   \   00000084   ........           _BLF        __fGreaterEqual,??__fGreaterEqual??rT
   \   00000088   0028               CMP         R0,#+0
   \   0000008A   01D0               BEQ         ??accel2euler_2
   \   0000008C   FE24               MOV         R4,#+254
   \   0000008E   A405               LSL         R4,R4,#+22         ;; #+1065353216
   \                     ??accel2euler_2:
   \   00000090   201C               MOV         R0,R4
   \   00000092   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   00000096   ........           _BLF        asin,??asin??rT
   \   0000009A   8022               MOV         R2,#+128
   \   0000009C   1206               LSL         R2,R2,#+24         ;; #-2147483648
   \   0000009E   5140               EOR         R1,R2
   \   000000A0   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   000000A4   7060               STR         R0,[R6, #+4]
     81          	
     82          	THETAm[2] =   compass_heading( THETAm, compass ) ;
   \   000000A6   391C               MOV         R1,R7
   \   000000A8   301C               MOV         R0,R6
   \   000000AA   ........           BL          compass_heading
   \   000000AE   ....               B           ?Subroutine12
   \                     ??accel2euler_0:
   \   000000B0   000080BF           DC32        0xbf800000
   \   000000B4   0100803F           DC32        0x3f800001
     83          }
     84          
     85          
     86          /**********************************************************/
     87          /**********************************************************/
     88          

   \                                 In segment CODE, align 4, keep-with-next
     89          void quat2dcv( double* DCV, const double* q )
     90          {
   \                     quat2dcv:
   \   00000000   F0B5               PUSH        {R4-R7,LR}
   \   00000002   051C               MOV         R5,R0
   \   00000004   0C1C               MOV         R4,R1
     91          	DCV[0] =     2*(q[1]*q[3] - q[0]*q[2]);
   \   00000006   03CC               LDMIA       R4!,{R0,R1}
   \   00000008   083C               SUB         R4,#+8
   \   0000000A   221C               MOV         R2,R4
   \   0000000C   1032               ADD         R2,#+16
   \   0000000E   0CCA               LDMIA       R2!,{R2,R3}
   \   00000010   ........           _BLF        __dMul,??__dMul??rT
   \   00000014   061C               MOV         R6,R0
   \   00000016   0F1C               MOV         R7,R1
   \   00000018   201C               MOV         R0,R4
   \   0000001A   0830               ADD         R0,#+8
   \   0000001C   0CC8               LDMIA       R0!,{R2,R3}
   \   0000001E   201C               MOV         R0,R4
   \   00000020   1830               ADD         R0,#+24
   \   00000022   03C8               LDMIA       R0!,{R0,R1}
   \   00000024   ........           _BLF        __dMul,??__dMul??rT
   \   00000028   321C               MOV         R2,R6
   \   0000002A   3B1C               MOV         R3,R7
   \   0000002C   ........           _BLF        __dSub,??__dSub??rT
   \   00000030   021C               MOV         R2,R0
   \   00000032   0B1C               MOV         R3,R1
   \   00000034   0020               MOV         R0,#+0
   \   00000036   8021               MOV         R1,#+128
   \   00000038   C905               LSL         R1,R1,#+23         ;; #+1073741824
   \   0000003A   ........           _BLF        __dMul,??__dMul??rT
   \   0000003E   03C5               STMIA       R5!,{R0,R1}
   \   00000040   083D               SUB         R5,#+8
     92          	DCV[1] =     2*(q[2]*q[3] + q[0]*q[1]);
   \   00000042   2A1C               MOV         R2,R5
   \   00000044   0832               ADD         R2,#+8
   \   00000046   04B4               PUSH        {R2}
   \   00000048   0CCC               LDMIA       R4!,{R2,R3}
   \   0000004A   083C               SUB         R4,#+8
   \   0000004C   201C               MOV         R0,R4
   \   0000004E   0830               ADD         R0,#+8
   \   00000050   03C8               LDMIA       R0!,{R0,R1}
   \   00000052   ........           _BLF        __dMul,??__dMul??rT
   \   00000056   061C               MOV         R6,R0
   \   00000058   0F1C               MOV         R7,R1
   \   0000005A   201C               MOV         R0,R4
   \   0000005C   1030               ADD         R0,#+16
   \   0000005E   0CC8               LDMIA       R0!,{R2,R3}
   \   00000060   201C               MOV         R0,R4
   \   00000062   1830               ADD         R0,#+24
   \   00000064   03C8               LDMIA       R0!,{R0,R1}
   \   00000066   ........           _BLF        __dMul,??__dMul??rT
   \   0000006A   321C               MOV         R2,R6
   \   0000006C   3B1C               MOV         R3,R7
   \   0000006E   ........           _BLF        __dAdd,??__dAdd??rT
   \   00000072   021C               MOV         R2,R0
   \   00000074   0B1C               MOV         R3,R1
   \   00000076   0020               MOV         R0,#+0
   \   00000078   8021               MOV         R1,#+128
   \   0000007A   C905               LSL         R1,R1,#+23         ;; #+1073741824
   \   0000007C   ........           _BLF        __dMul,??__dMul??rT
   \   00000080   04BC               POP         {R2}
   \   00000082   03C2               STMIA       R2!,{R0,R1}
     93          	DCV[2] = 1.0-2*(q[1]*q[1] + q[2]*q[2]);
   \   00000084   1035               ADD         R5,#+16
   \   00000086   201C               MOV         R0,R4
   \   00000088   1030               ADD         R0,#+16
   \   0000008A   03C8               LDMIA       R0!,{R0,R1}
   \   0000008C   221C               MOV         R2,R4
   \   0000008E   1032               ADD         R2,#+16
   \   00000090   0CCA               LDMIA       R2!,{R2,R3}
   \   00000092   ........           _BLF        __dMul,??__dMul??rT
   \   00000096   061C               MOV         R6,R0
   \   00000098   0F1C               MOV         R7,R1
   \   0000009A   201C               MOV         R0,R4
   \   0000009C   0830               ADD         R0,#+8
   \   0000009E   0CC8               LDMIA       R0!,{R2,R3}
   \   000000A0   0834               ADD         R4,#+8
   \   000000A2   03CC               LDMIA       R4!,{R0,R1}
   \   000000A4   ........           _BLF        __dMul,??__dMul??rT
   \   000000A8   321C               MOV         R2,R6
   \   000000AA   3B1C               MOV         R3,R7
   \   000000AC   ........           _BLF        __dAdd,??__dAdd??rT
   \   000000B0   0022               MOV         R2,#+0
   \   000000B2   8023               MOV         R3,#+128
   \   000000B4   DB05               LSL         R3,R3,#+23         ;; #+1073741824
   \   000000B6   ........           _BLF        __dMul,??__dMul??rT
   \   000000BA   021C               MOV         R2,R0
   \   000000BC   0B1C               MOV         R3,R1
   \   000000BE   0020               MOV         R0,#+0
   \   000000C0   ....               LDR         R1,??DataTable0    ;; 0x3ff00000
   \   000000C2   ........           _BLF        __dSub,??__dSub??rT
   \   000000C6   03C5               STMIA       R5!,{R0,R1}
     94          }
   \   000000C8   ....               B           ??Subroutine12_0
     95          
     96          /**********************************************************/
     97          /**********************************************************/
     98          

   \                                 In segment CODE, align 4, keep-with-next
     99          void dcv2euler( double* THETAe, const double* DCV )
    100          {
   \                     dcv2euler:
   \   00000000   30B5               PUSH        {R4,R5,LR}
   \   00000002   051C               MOV         R5,R0
   \   00000004   0C1C               MOV         R4,R1
    101          #ifdef __AVR__
    102          		THETAe[0] = atan2( DCV[2], DCV[1] );
    103          #else
    104          		THETAe[0] = atan2( DCV[1], DCV[2] );
   \   00000006   081C               MOV         R0,R1
   \   00000008   1030               ADD         R0,#+16
   \   0000000A   0CC8               LDMIA       R0!,{R2,R3}
   \   0000000C   081C               MOV         R0,R1
   \   0000000E   0830               ADD         R0,#+8
   \   00000010   03C8               LDMIA       R0!,{R0,R1}
   \   00000012   ........           _BLF        atan2,??atan2??rT
   \   00000016   03C5               STMIA       R5!,{R0,R1}
    105          #endif
    106          
    107          		THETAe[1] = -asin( DCV[0] );
   \   00000018   03CC               LDMIA       R4!,{R0,R1}
   \   0000001A   ........           _BLF        asin,??asin??rT
   \   0000001E   8022               MOV         R2,#+128
   \   00000020   1206               LSL         R2,R2,#+24         ;; #-2147483648
   \   00000022   5140               EOR         R1,R2
   \   00000024   03C5               STMIA       R5!,{R0,R1}
    108          				
    109          }
   \   00000026   30BC               POP         {R4,R5}
   \   00000028   01BC               POP         {R0}
   \   0000002A   0047               BX          R0                 ;; return
    110          
    111          /**********************************************************/
    112          /**********************************************************/
    113          

   \                                 In segment CODE, align 4, keep-with-next
    114          void quat2euler( float* THETAe, const float * quat )
    115          {
   \                     quat2euler:
   \   00000000   F0B5               PUSH        {R4-R7,LR}
   \   00000002   061C               MOV         R6,R0
   \   00000004   0C1C               MOV         R4,R1
    116          	THETAe[0] = atan2( 2 * (quat[2] * quat[3] + quat[0] * quat[1] ),\
    117          				1 - 2 * (quat[1] * quat[1] + quat[2] * quat[2] ) );
   \   00000006   8025               MOV         R5,#+128
   \   00000008   ED05               LSL         R5,R5,#+23         ;; #+1073741824
   \   0000000A   FE27               MOV         R7,#+254
   \   0000000C   BF05               LSL         R7,R7,#+22         ;; #+1065353216
   \   0000000E   8968               LDR         R1,[R1, #+8]
   \   00000010   081C               MOV         R0,R1
   \   00000012   ........           _BLF        __fMul,??__fMul??rT
   \   00000016   011C               MOV         R1,R0
   \   00000018   02B4               PUSH        {R1}
   \   0000001A   6168               LDR         R1,[R4, #+4]
   \   0000001C   081C               MOV         R0,R1
   \   0000001E   ........           _BLF        __fMul,??__fMul??rT
   \   00000022   02BC               POP         {R1}
   \   00000024   ........           _BLF        __fAdd,??__fAdd??rT
   \   00000028   291C               MOV         R1,R5
   \   0000002A   ........           _BLF        __fMul,??__fMul??rT
   \   0000002E   011C               MOV         R1,R0
   \   00000030   381C               MOV         R0,R7
   \   00000032   ........           _BLF        __fSub,??__fSub??rT
   \   00000036   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   0000003A   021C               MOV         R2,R0
   \   0000003C   0B1C               MOV         R3,R1
   \   0000003E   0CB4               PUSH        {R2,R3}
   \   00000040   2168               LDR         R1,[R4, #+0]
   \   00000042   6068               LDR         R0,[R4, #+4]
   \   00000044   ........           _BLF        __fMul,??__fMul??rT
   \   00000048   011C               MOV         R1,R0
   \   0000004A   02B4               PUSH        {R1}
   \   0000004C   A168               LDR         R1,[R4, #+8]
   \   0000004E   E068               LDR         R0,[R4, #+12]
   \   00000050   ........           _BLF        __fMul,??__fMul??rT
   \   00000054   02BC               POP         {R1}
   \   00000056   ........           _BLF        __fAdd,??__fAdd??rT
   \   0000005A   291C               MOV         R1,R5
   \   0000005C   ........           _BLF        __fMul,??__fMul??rT
   \   00000060   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   00000064   0CBC               POP         {R2,R3}
   \   00000066   ........           _BLF        atan2,??atan2??rT
   \   0000006A   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   0000006E   3060               STR         R0,[R6, #+0]
    118          		
    119          	THETAe[1] =  -asin( 2 * ( quat[1] * quat[3] - quat[0] * quat[2] ) );
   \   00000070   2168               LDR         R1,[R4, #+0]
   \   00000072   A068               LDR         R0,[R4, #+8]
   \   00000074   ........           _BLF        __fMul,??__fMul??rT
   \   00000078   011C               MOV         R1,R0
   \   0000007A   02B4               PUSH        {R1}
   \   0000007C   6168               LDR         R1,[R4, #+4]
   \   0000007E   E068               LDR         R0,[R4, #+12]
   \   00000080   ........           _BLF        __fMul,??__fMul??rT
   \   00000084   02BC               POP         {R1}
   \   00000086   ........           _BLF        __fSub,??__fSub??rT
   \   0000008A   291C               MOV         R1,R5
   \   0000008C   ........           _BLF        __fMul,??__fMul??rT
   \   00000090   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   00000094   ........           _BLF        asin,??asin??rT
   \   00000098   8022               MOV         R2,#+128
   \   0000009A   1206               LSL         R2,R2,#+24         ;; #-2147483648
   \   0000009C   5140               EOR         R1,R2
   \   0000009E   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   000000A2   7060               STR         R0,[R6, #+4]
    120          				
    121          	THETAe[2] = atan2( 2 * ( quat[1] * quat[2] + quat[0] * quat[3] ), \
    122          				1 - 2 * ( quat[2] * quat[2] + quat[3] * quat[3] ) );
   \   000000A4   E168               LDR         R1,[R4, #+12]
   \   000000A6   081C               MOV         R0,R1
   \   000000A8   ........           _BLF        __fMul,??__fMul??rT
   \   000000AC   011C               MOV         R1,R0
   \   000000AE   02B4               PUSH        {R1}
   \   000000B0   A168               LDR         R1,[R4, #+8]
   \   000000B2   081C               MOV         R0,R1
   \   000000B4   ........           _BLF        __fMul,??__fMul??rT
   \   000000B8   02BC               POP         {R1}
   \   000000BA   ........           _BLF        __fAdd,??__fAdd??rT
   \   000000BE   291C               MOV         R1,R5
   \   000000C0   ........           _BLF        __fMul,??__fMul??rT
   \   000000C4   011C               MOV         R1,R0
   \   000000C6   381C               MOV         R0,R7
   \   000000C8   ........           _BLF        __fSub,??__fSub??rT
   \   000000CC   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   000000D0   021C               MOV         R2,R0
   \   000000D2   0B1C               MOV         R3,R1
   \   000000D4   0CB4               PUSH        {R2,R3}
   \   000000D6   2168               LDR         R1,[R4, #+0]
   \   000000D8   E068               LDR         R0,[R4, #+12]
   \   000000DA   ........           _BLF        __fMul,??__fMul??rT
   \   000000DE   071C               MOV         R7,R0
   \   000000E0   6168               LDR         R1,[R4, #+4]
   \   000000E2   A068               LDR         R0,[R4, #+8]
   \   000000E4   ........           _BLF        __fMul,??__fMul??rT
   \   000000E8   391C               MOV         R1,R7
   \   000000EA   ........           _BLF        __fAdd,??__fAdd??rT
   \   000000EE   291C               MOV         R1,R5
   \   000000F0   ........           _BLF        __fMul,??__fMul??rT
   \   000000F4   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   000000F8   0CBC               POP         {R2,R3}
   \   000000FA   ........           _BLF        atan2,??atan2??rT
   \   000000FE   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   00000102   C046               NOP         
   \   00000104                      REQUIRE ?Subroutine12
   \   00000104                      ;; // Fall through to label ?Subroutine12
    123          }
    124          
    125          /**********************************************************/
    126          /**********************************************************/
    127          

   \                                 In segment CODE, align 4, keep-with-next
    128          void euler2quat( float* quat, const float* myeuler )
    129          {
   \                     euler2quat:
   \   00000000   F1B5               PUSH        {R0,R4-R7,LR}
   \   00000002   87B0               SUB         SP,#+28
   \   00000004   0C1C               MOV         R4,R1
    130          	const float phi   = myeuler[0] / 2.0;
   \   00000006   0868               LDR         R0,[R1, #+0]
   \   00000008   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   0000000C   0022               MOV         R2,#+0
   \   0000000E   8023               MOV         R3,#+128
   \   00000010   DB05               LSL         R3,R3,#+23         ;; #+1073741824
   \   00000012   ........           _BLF        __dDiv,??__dDiv??rT
   \   00000016   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   0000001A   051C               MOV         R5,R0
    131          	const float theta = myeuler[1] / 2.0;
   \   0000001C   6068               LDR         R0,[R4, #+4]
   \   0000001E   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   00000022   0022               MOV         R2,#+0
   \   00000024   8023               MOV         R3,#+128
   \   00000026   DB05               LSL         R3,R3,#+23         ;; #+1073741824
   \   00000028   ........           _BLF        __dDiv,??__dDiv??rT
   \   0000002C   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   00000030   061C               MOV         R6,R0
    132          	const float psi   = myeuler[2] / 2.0;
   \   00000032   A068               LDR         R0,[R4, #+8]
   \   00000034   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   00000038   0022               MOV         R2,#+0
   \   0000003A   8023               MOV         R3,#+128
   \   0000003C   DB05               LSL         R3,R3,#+23         ;; #+1073741824
   \   0000003E   ........           _BLF        __dDiv,??__dDiv??rT
   \   00000042   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   00000046   0490               STR         R0,[SP, #+16]
    133          					
    134          	const float shphi0   = sin( phi );
   \   00000048   281C               MOV         R0,R5
   \   0000004A   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   0000004E   041C               MOV         R4,R0
   \   00000050   0D1C               MOV         R5,R1
   \   00000052   0022               MOV         R2,#+0
   \   00000054   ........           _BLF        _Sin,??_Sin??rT
   \   00000058   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   0000005C   0190               STR         R0,[SP, #+4]
    135          	const float chphi0   = cos( phi );
   \   0000005E   0122               MOV         R2,#+1
   \   00000060   201C               MOV         R0,R4
   \   00000062   291C               MOV         R1,R5
   \   00000064   ........           _BLF        _Sin,??_Sin??rT
   \   00000068   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   0000006C   041C               MOV         R4,R0
    136          							
    137          	const float shtheta0 = sin( theta );
   \   0000006E   301C               MOV         R0,R6
   \   00000070   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   00000074   061C               MOV         R6,R0
   \   00000076   0F1C               MOV         R7,R1
   \   00000078   0022               MOV         R2,#+0
   \   0000007A   ........           _BLF        _Sin,??_Sin??rT
   \   0000007E   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   00000082   0090               STR         R0,[SP, #+0]
    138          	const float chtheta0 = cos (theta );
   \   00000084   0122               MOV         R2,#+1
   \   00000086   301C               MOV         R0,R6
   \   00000088   391C               MOV         R1,R7
   \   0000008A   ........           _BLF        _Sin,??_Sin??rT
   \   0000008E   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   00000092   061C               MOV         R6,R0
    139          									
    140          	const float shpsi0   = sin( psi );
   \   00000094   05AD               ADD         R5,SP,#+20
   \   00000096   0498               LDR         R0,[SP, #+16]
   \   00000098   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   0000009C   03C5               STMIA       R5!,{R0,R1}
   \   0000009E   0022               MOV         R2,#+0
   \   000000A0   05A8               ADD         R0,SP,#+20
   \   000000A2   03C8               LDMIA       R0!,{R0,R1}
   \   000000A4   ........           _BLF        _Sin,??_Sin??rT
   \   000000A8   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   000000AC   051C               MOV         R5,R0
    141          	const float chpsi0   = cos( psi );
   \   000000AE   0122               MOV         R2,#+1
   \   000000B0   05A8               ADD         R0,SP,#+20
   \   000000B2   03C8               LDMIA       R0!,{R0,R1}
   \   000000B4   ........           _BLF        _Sin,??_Sin??rT
   \   000000B8   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   000000BC   071C               MOV         R7,R0
    142          											
    143          	quat[0] =  chphi0 * chtheta0 * chpsi0 + shphi0 * shtheta0 * shpsi0;
   \   000000BE   0199               LDR         R1,[SP, #+4]
   \   000000C0   0098               LDR         R0,[SP, #+0]
   \   000000C2   ........           _BLF        __fMul,??__fMul??rT
   \   000000C6   0290               STR         R0,[SP, #+8]
   \   000000C8   201C               MOV         R0,R4
   \   000000CA   311C               MOV         R1,R6
   \   000000CC   ........           _BLF        __fMul,??__fMul??rT
   \   000000D0   0390               STR         R0,[SP, #+12]
   \   000000D2   0799               LDR         R1,[SP, #+28]
   \   000000D4   02B4               PUSH        {R1}
   \   000000D6   0398               LDR         R0,[SP, #+12]
   \   000000D8   291C               MOV         R1,R5
   \   000000DA   ........           _BLF        __fMul,??__fMul??rT
   \   000000DE   011C               MOV         R1,R0
   \   000000E0   02B4               PUSH        {R1}
   \   000000E2   0598               LDR         R0,[SP, #+20]
   \   000000E4   391C               MOV         R1,R7
   \   000000E6   ........           _BLF        __fMul,??__fMul??rT
   \   000000EA   02BC               POP         {R1}
   \   000000EC   ........           _BLF        __fAdd,??__fAdd??rT
   \   000000F0   02BC               POP         {R1}
   \   000000F2   0860               STR         R0,[R1, #+0]
    144          	quat[1] = -chphi0 * shtheta0 * shpsi0 + shphi0 * chtheta0 * chpsi0;
   \   000000F4   0098               LDR         R0,[SP, #+0]
   \   000000F6   211C               MOV         R1,R4
   \   000000F8   ........           _BLF        __fMul,??__fMul??rT
   \   000000FC   041C               MOV         R4,R0
   \   000000FE   0198               LDR         R0,[SP, #+4]
   \   00000100   311C               MOV         R1,R6
   \   00000102   ........           _BLF        __fMul,??__fMul??rT
   \   00000106   061C               MOV         R6,R0
   \   00000108   0799               LDR         R1,[SP, #+28]
   \   0000010A   02B4               PUSH        {R1}
   \   0000010C   201C               MOV         R0,R4
   \   0000010E   291C               MOV         R1,R5
   \   00000110   ........           _BLF        __fMul,??__fMul??rT
   \   00000114   011C               MOV         R1,R0
   \   00000116   02B4               PUSH        {R1}
   \   00000118   301C               MOV         R0,R6
   \   0000011A   391C               MOV         R1,R7
   \   0000011C   ........           _BLF        __fMul,??__fMul??rT
   \   00000120   02BC               POP         {R1}
   \   00000122   ........           _BLF        __fSub,??__fSub??rT
   \   00000126   02BC               POP         {R1}
   \   00000128   4860               STR         R0,[R1, #+4]
    145          	quat[2] =  chphi0 * shtheta0 * chpsi0 + shphi0 * chtheta0 * shpsi0;
   \   0000012A   0799               LDR         R1,[SP, #+28]
   \   0000012C   02B4               PUSH        {R1}
   \   0000012E   301C               MOV         R0,R6
   \   00000130   291C               MOV         R1,R5
   \   00000132   ........           _BLF        __fMul,??__fMul??rT
   \   00000136   061C               MOV         R6,R0
   \   00000138   201C               MOV         R0,R4
   \   0000013A   391C               MOV         R1,R7
   \   0000013C   ........           _BLF        __fMul,??__fMul??rT
   \   00000140   311C               MOV         R1,R6
   \   00000142   ........           _BLF        __fAdd,??__fAdd??rT
   \   00000146   02BC               POP         {R1}
   \   00000148   8860               STR         R0,[R1, #+8]
    146          	quat[3] =  chphi0 * chtheta0 * shpsi0 - shphi0 * shtheta0 * chpsi0;
   \   0000014A   079C               LDR         R4,[SP, #+28]
   \   0000014C   0298               LDR         R0,[SP, #+8]
   \   0000014E   391C               MOV         R1,R7
   \   00000150   ........           _BLF        __fMul,??__fMul??rT
   \   00000154   061C               MOV         R6,R0
   \   00000156   0398               LDR         R0,[SP, #+12]
   \   00000158   291C               MOV         R1,R5
   \   0000015A   ........           _BLF        __fMul,??__fMul??rT
   \   0000015E   311C               MOV         R1,R6
   \   00000160   ........           _BLF        __fSub,??__fSub??rT
   \   00000164   E060               STR         R0,[R4, #+12]
    147          }
   \   00000166   08B0               ADD         SP,#+32
   \   00000168   ....               B           ??Subroutine12_0
    148          
    149          /**********************************************************/
    150          /**********************************************************/
    151          

   \                                 In segment CODE, align 4, keep-with-next
    152          void invert2( float (*A)[2] )
    153          {
   \                     invert2:
   \   00000000   70B5               PUSH        {R4-R6,LR}
   \   00000002   041C               MOV         R4,R0
    154             float det = A[0][0] * A[1][1] - A[0][1] * A[1][0];
   \   00000004   4168               LDR         R1,[R0, #+4]
   \   00000006   8068               LDR         R0,[R0, #+8]
   \   00000008   ........           _BLF        __fMul,??__fMul??rT
   \   0000000C   051C               MOV         R5,R0
   \   0000000E   2168               LDR         R1,[R4, #+0]
   \   00000010   E068               LDR         R0,[R4, #+12]
   \   00000012   ........           _BLF        __fMul,??__fMul??rT
   \   00000016   291C               MOV         R1,R5
   \   00000018   ........           _BLF        __fSub,??__fSub??rT
   \   0000001C   051C               MOV         R5,R0
    155             float temp = A[0][0];			
   \   0000001E   2668               LDR         R6,[R4, #+0]
    156          
    157             A[0][0] = A[1][1] / det;
   \   00000020   E068               LDR         R0,[R4, #+12]
   \   00000022   291C               MOV         R1,R5
   \   00000024   ........           _BLF        __fDiv,??__fDiv??rT
   \   00000028   2060               STR         R0,[R4, #+0]
    158             A[1][1] = temp /det;
   \   0000002A   301C               MOV         R0,R6
   \   0000002C   291C               MOV         R1,R5
   \   0000002E   ........           _BLF        __fDiv,??__fDiv??rT
   \   00000032   E060               STR         R0,[R4, #+12]
    159             A[0][1] /= -det;
   \   00000034   6068               LDR         R0,[R4, #+4]
   \   00000036   291C               MOV         R1,R5
   \   00000038   ........           _BLF        __fDiv,??__fDiv??rT
   \   0000003C   8021               MOV         R1,#+128
   \   0000003E   0906               LSL         R1,R1,#+24         ;; #-2147483648
   \   00000040   4840               EOR         R0,R1
   \   00000042   6060               STR         R0,[R4, #+4]
    160             A[1][0] /= -det;
   \   00000044   A068               LDR         R0,[R4, #+8]
   \   00000046   291C               MOV         R1,R5
   \   00000048   ........           _BLF        __fDiv,??__fDiv??rT
   \   0000004C   8021               MOV         R1,#+128
   \   0000004E   0906               LSL         R1,R1,#+24         ;; #-2147483648
   \   00000050   4840               EOR         R0,R1
   \   00000052   A060               STR         R0,[R4, #+8]
    161          }
   \   00000054   70BC               POP         {R4-R6}
   \   00000056   01BC               POP         {R0}
   \   00000058   0047               BX          R0                 ;; return
    162          
    163          /**********************************************************/
    164          /**********************************************************/
    165          

   \                                 In segment CODE, align 4, keep-with-next
    166          void quat2DCM( float (*DD)[3], const float* quat )
    167          {
   \                     quat2DCM:
   \   00000000   F0B5               PUSH        {R4-R7,LR}
   \   00000002   041C               MOV         R4,R0
   \   00000004   0D1C               MOV         R5,R1
    168          	DD[0][0] = 1 - 2 * ( quat[2]*quat[2] + quat[3]*quat[3] );
   \   00000006   8026               MOV         R6,#+128
   \   00000008   F605               LSL         R6,R6,#+23         ;; #+1073741824
   \   0000000A   FE27               MOV         R7,#+254
   \   0000000C   BF05               LSL         R7,R7,#+22         ;; #+1065353216
   \   0000000E   C968               LDR         R1,[R1, #+12]
   \   00000010   081C               MOV         R0,R1
   \   00000012   ........           _BLF        __fMul,??__fMul??rT
   \   00000016   011C               MOV         R1,R0
   \   00000018   02B4               PUSH        {R1}
   \   0000001A   A968               LDR         R1,[R5, #+8]
   \   0000001C   081C               MOV         R0,R1
   \   0000001E   ........           _BLF        __fMul,??__fMul??rT
   \   00000022   02BC               POP         {R1}
   \   00000024   ........           _BLF        __fAdd,??__fAdd??rT
   \   00000028   311C               MOV         R1,R6
   \   0000002A   ........           _BLF        __fMul,??__fMul??rT
   \   0000002E   011C               MOV         R1,R0
   \   00000030   381C               MOV         R0,R7
   \   00000032   ........           _BLF        __fSub,??__fSub??rT
   \   00000036   2060               STR         R0,[R4, #+0]
    169          	DD[0][1] = 2 * ( quat[1]*quat[2] + quat[0]*quat[3] );
   \   00000038   2968               LDR         R1,[R5, #+0]
   \   0000003A   E868               LDR         R0,[R5, #+12]
   \   0000003C   ........           _BLF        __fMul,??__fMul??rT
   \   00000040   011C               MOV         R1,R0
   \   00000042   02B4               PUSH        {R1}
   \   00000044   6968               LDR         R1,[R5, #+4]
   \   00000046   A868               LDR         R0,[R5, #+8]
   \   00000048   ........           _BLF        __fMul,??__fMul??rT
   \   0000004C   02BC               POP         {R1}
   \   0000004E   ........           _BLF        __fAdd,??__fAdd??rT
   \   00000052   311C               MOV         R1,R6
   \   00000054   ........           _BLF        __fMul,??__fMul??rT
   \   00000058   6060               STR         R0,[R4, #+4]
    170          	DD[0][2] = 2 * ( quat[1]*quat[3] - quat[0]*quat[2] );
   \   0000005A   2968               LDR         R1,[R5, #+0]
   \   0000005C   A868               LDR         R0,[R5, #+8]
   \   0000005E   ........           _BLF        __fMul,??__fMul??rT
   \   00000062   011C               MOV         R1,R0
   \   00000064   02B4               PUSH        {R1}
   \   00000066   6968               LDR         R1,[R5, #+4]
   \   00000068   E868               LDR         R0,[R5, #+12]
   \   0000006A   ........           _BLF        __fMul,??__fMul??rT
   \   0000006E   02BC               POP         {R1}
   \   00000070   ........           _BLF        __fSub,??__fSub??rT
   \   00000074   311C               MOV         R1,R6
   \   00000076   ........           _BLF        __fMul,??__fMul??rT
   \   0000007A   A060               STR         R0,[R4, #+8]
    171          					
    172          	DD[1][0] = 2 * ( quat[1]*quat[2] - quat[0]*quat[3] );
   \   0000007C   2968               LDR         R1,[R5, #+0]
   \   0000007E   E868               LDR         R0,[R5, #+12]
   \   00000080   ........           _BLF        __fMul,??__fMul??rT
   \   00000084   011C               MOV         R1,R0
   \   00000086   02B4               PUSH        {R1}
   \   00000088   6968               LDR         R1,[R5, #+4]
   \   0000008A   A868               LDR         R0,[R5, #+8]
   \   0000008C   ........           _BLF        __fMul,??__fMul??rT
   \   00000090   02BC               POP         {R1}
   \   00000092   ........           _BLF        __fSub,??__fSub??rT
   \   00000096   311C               MOV         R1,R6
   \   00000098   ........           _BLF        __fMul,??__fMul??rT
   \   0000009C   E060               STR         R0,[R4, #+12]
    173          	DD[1][1] = 1 - 2 * ( quat[1]*quat[1] + quat[3]*quat[3] );
   \   0000009E   E968               LDR         R1,[R5, #+12]
   \   000000A0   081C               MOV         R0,R1
   \   000000A2   ........           _BLF        __fMul,??__fMul??rT
   \   000000A6   011C               MOV         R1,R0
   \   000000A8   02B4               PUSH        {R1}
   \   000000AA   6968               LDR         R1,[R5, #+4]
   \   000000AC   081C               MOV         R0,R1
   \   000000AE   ........           _BLF        __fMul,??__fMul??rT
   \   000000B2   02BC               POP         {R1}
   \   000000B4   ........           _BLF        __fAdd,??__fAdd??rT
   \   000000B8   311C               MOV         R1,R6
   \   000000BA   ........           _BLF        __fMul,??__fMul??rT
   \   000000BE   011C               MOV         R1,R0
   \   000000C0   381C               MOV         R0,R7
   \   000000C2   ........           _BLF        __fSub,??__fSub??rT
   \   000000C6   2061               STR         R0,[R4, #+16]
    174          	DD[1][2] = 2 * ( quat[2]*quat[3] + quat[0]*quat[1] );
   \   000000C8   2968               LDR         R1,[R5, #+0]
   \   000000CA   6868               LDR         R0,[R5, #+4]
   \   000000CC   ........           _BLF        __fMul,??__fMul??rT
   \   000000D0   011C               MOV         R1,R0
   \   000000D2   02B4               PUSH        {R1}
   \   000000D4   A968               LDR         R1,[R5, #+8]
   \   000000D6   E868               LDR         R0,[R5, #+12]
   \   000000D8   ........           _BLF        __fMul,??__fMul??rT
   \   000000DC   02BC               POP         {R1}
   \   000000DE   ........           _BLF        __fAdd,??__fAdd??rT
   \   000000E2   311C               MOV         R1,R6
   \   000000E4   ........           _BLF        __fMul,??__fMul??rT
   \   000000E8   6061               STR         R0,[R4, #+20]
    175          								
    176          	DD[2][0] = 2 * ( quat[1]*quat[3] + quat[0]*quat[2] );
   \   000000EA   2968               LDR         R1,[R5, #+0]
   \   000000EC   A868               LDR         R0,[R5, #+8]
   \   000000EE   ........           _BLF        __fMul,??__fMul??rT
   \   000000F2   011C               MOV         R1,R0
   \   000000F4   02B4               PUSH        {R1}
   \   000000F6   6968               LDR         R1,[R5, #+4]
   \   000000F8   E868               LDR         R0,[R5, #+12]
   \   000000FA   ........           _BLF        __fMul,??__fMul??rT
   \   000000FE   02BC               POP         {R1}
   \   00000100   ........           _BLF        __fAdd,??__fAdd??rT
   \   00000104   311C               MOV         R1,R6
   \   00000106   ........           _BLF        __fMul,??__fMul??rT
   \   0000010A   A061               STR         R0,[R4, #+24]
    177          	DD[2][1] = 2 * ( quat[2]*quat[3] - quat[0]*quat[1] );
   \   0000010C   2968               LDR         R1,[R5, #+0]
   \   0000010E   6868               LDR         R0,[R5, #+4]
   \   00000110   ........           _BLF        __fMul,??__fMul??rT
   \   00000114   011C               MOV         R1,R0
   \   00000116   02B4               PUSH        {R1}
   \   00000118   A968               LDR         R1,[R5, #+8]
   \   0000011A   E868               LDR         R0,[R5, #+12]
   \   0000011C   ........           _BLF        __fMul,??__fMul??rT
   \   00000120   02BC               POP         {R1}
   \   00000122   ........           _BLF        __fSub,??__fSub??rT
   \   00000126   311C               MOV         R1,R6
   \   00000128   ........           _BLF        __fMul,??__fMul??rT
   \   0000012C   E061               STR         R0,[R4, #+28]
    178          	DD[2][2] = 1 - 2 * ( quat[1]*quat[1] + quat[2]*quat[2] );
   \   0000012E   10B4               PUSH        {R4}
   \   00000130   A968               LDR         R1,[R5, #+8]
   \   00000132   081C               MOV         R0,R1
   \   00000134   ........           _BLF        __fMul,??__fMul??rT
   \   00000138   041C               MOV         R4,R0
   \   0000013A   6968               LDR         R1,[R5, #+4]
   \   0000013C   081C               MOV         R0,R1
   \   0000013E   ........           _BLF        __fMul,??__fMul??rT
   \   00000142   211C               MOV         R1,R4
   \   00000144   ........           _BLF        __fAdd,??__fAdd??rT
   \   00000148   311C               MOV         R1,R6
   \   0000014A   ........           _BLF        __fMul,??__fMul??rT
   \   0000014E   011C               MOV         R1,R0
   \   00000150   381C               MOV         R0,R7
   \   00000152   ........           _BLF        __fSub,??__fSub??rT
   \   00000156   10BC               POP         {R4}
   \   00000158   2062               STR         R0,[R4, #+32]
    179          }
   \   0000015A   ....               B           ??Subroutine12_0
    180          
    181          /**********************************************************/
    182          /**********************************************************/
    183          	

   \                                 In segment CODE, align 4, keep-with-next
    184          void invert3( float (*matrix)[3], unsigned char order )
    185          {	
   \                     invert3:
   \   00000000   F3B5               PUSH        {R0,R1,R4-R7,LR}
   \   00000002   83B0               SUB         SP,#+12
   \   00000004   0024               MOV         R4,#+0
   \   00000006   30E0               B           ??invert3_0
    186          	unsigned char m, i, j;
    187          		
    188          	for( m=0; m<order; m++ ){
    189             	  for( i=0; i<order; i++ ){
    190          	    for( j=0; j<order; j++ ){
    191          	      if( ( i!=m ) && ( j!=m ) ) {
    192          		   matrix[i][j] = matrix[i][j] - matrix[i][m]*matrix[m][j]/matrix[m][m];
    193          	      }	
    194                      }
    195                    }
    196          
    197          	  for( j=0; j<order; j++ ){									      	         if( j != m ){
   \                     ??invert3_1:
   \   00000008   2106               LSL         R1,R4,#+24
   \   0000000A   090E               LSR         R1,R1,#+24
   \   0000000C   8842               CMP         R0,R1
   \   0000000E   15D0               BEQ         ??invert3_2
    198           		matrix[m][j] =  matrix[m][j]/matrix[m][m];
   \   00000010   B000               LSL         R0,R6,#+2
   \   00000012   0199               LDR         R1,[SP, #+4]
   \   00000014   0D18               ADD         R5,R1,R0
   \   00000016   2868               LDR         R0,[R5, #+0]
   \   00000018   0099               LDR         R1,[SP, #+0]
   \   0000001A   0968               LDR         R1,[R1, #+0]
   \   0000001C   ........           _BLF        __fDiv,??__fDiv??rT
   \   00000020   2860               STR         R0,[R5, #+0]
    199          									
    200          		matrix[j][m] = -matrix[j][m]/matrix[m][m];
   \   00000022   0C20               MOV         R0,#+12
   \   00000024   7043               MUL         R0,R6
   \   00000026   0299               LDR         R1,[SP, #+8]
   \   00000028   0D18               ADD         R5,R1,R0
   \   0000002A   2868               LDR         R0,[R5, #+0]
   \   0000002C   0099               LDR         R1,[SP, #+0]
   \   0000002E   0968               LDR         R1,[R1, #+0]
   \   00000030   ........           _BLF        __fDiv,??__fDiv??rT
   \   00000034   8021               MOV         R1,#+128
   \   00000036   0906               LSL         R1,R1,#+24         ;; #-2147483648
   \   00000038   4840               EOR         R0,R1
   \   0000003A   2860               STR         R0,[R5, #+0]
    201          
    202          	    }
    203             	  }
   \                     ??invert3_2:
   \   0000003C   761C               ADD         R6,R6,#+1
   \                     ??invert3_3:
   \   0000003E   6946               MOV         R1,SP
   \   00000040   097C               LDRB        R1,[R1, #+16]
   \   00000042   3006               LSL         R0,R6,#+24
   \   00000044   000E               LSR         R0,R0,#+24
   \   00000046   8842               CMP         R0,R1
   \   00000048   DED3               BCC         ??invert3_1
    204          
    205          	  matrix[m][m] = 1.0/matrix[m][m];
   \   0000004A   009D               LDR         R5,[SP, #+0]
   \   0000004C   ....               LDR         R1,??DataTable2    ;; 0x3ff00000
   \   0000004E   0F1C               MOV         R7,R1
   \   00000050   2868               LDR         R0,[R5, #+0]
   \   00000052   ........           _BLF        __floatToDouble,??__floatToDouble??rT
   \   00000056   021C               MOV         R2,R0
   \   00000058   0B1C               MOV         R3,R1
   \   0000005A   0020               MOV         R0,#+0
   \   0000005C   391C               MOV         R1,R7
   \   0000005E   ........           _BLF        __dDiv,??__dDiv??rT
   \   00000062   ........           _BLF        __doubleToFloat,??__doubleToFloat??rT
   \   00000066   2860               STR         R0,[R5, #+0]
   \   00000068   641C               ADD         R4,R4,#+1
   \                     ??invert3_0:
   \   0000006A   6946               MOV         R1,SP
   \   0000006C   097C               LDRB        R1,[R1, #+16]
   \   0000006E   2006               LSL         R0,R4,#+24
   \   00000070   000E               LSR         R0,R0,#+24
   \   00000072   8842               CMP         R0,R1
   \   00000074   3CD2               BCS         ??invert3_4
   \   00000076   0025               MOV         R5,#+0
   \   00000078   26E0               B           ??invert3_5
   \                     ??invert3_6:
   \   0000007A   2806               LSL         R0,R5,#+24
   \   0000007C   000E               LSR         R0,R0,#+24
   \   0000007E   2106               LSL         R1,R4,#+24
   \   00000080   090E               LSR         R1,R1,#+24
   \   00000082   8842               CMP         R0,R1
   \   00000084   18D0               BEQ         ??invert3_7
   \   00000086   3006               LSL         R0,R6,#+24
   \   00000088   000E               LSR         R0,R0,#+24
   \   0000008A   8842               CMP         R0,R1
   \   0000008C   14D0               BEQ         ??invert3_7
   \   0000008E   B000               LSL         R0,R6,#+2
   \   00000090   0C21               MOV         R1,#+12
   \   00000092   6943               MUL         R1,R5
   \   00000094   039A               LDR         R2,[SP, #+12]
   \   00000096   5218               ADD         R2,R2,R1
   \   00000098   1718               ADD         R7,R2,R0
   \   0000009A   029A               LDR         R2,[SP, #+8]
   \   0000009C   5158               LDR         R1,[R2, R1]
   \   0000009E   019A               LDR         R2,[SP, #+4]
   \   000000A0   1058               LDR         R0,[R2, R0]
   \   000000A2   ........           _BLF        __fMul,??__fMul??rT
   \   000000A6   0099               LDR         R1,[SP, #+0]
   \   000000A8   0968               LDR         R1,[R1, #+0]
   \   000000AA   ........           _BLF        __fDiv,??__fDiv??rT
   \   000000AE   011C               MOV         R1,R0
   \   000000B0   3868               LDR         R0,[R7, #+0]
   \   000000B2   ........           _BLF        __fSub,??__fSub??rT
   \   000000B6   3860               STR         R0,[R7, #+0]
   \                     ??invert3_7:
   \   000000B8   761C               ADD         R6,R6,#+1
   \                     ??invert3_8:
   \   000000BA   6946               MOV         R1,SP
   \   000000BC   097C               LDRB        R1,[R1, #+16]
   \   000000BE   3006               LSL         R0,R6,#+24
   \   000000C0   000E               LSR         R0,R0,#+24
   \   000000C2   8842               CMP         R0,R1
   \   000000C4   D9D3               BCC         ??invert3_6
   \   000000C6   6D1C               ADD         R5,R5,#+1
   \                     ??invert3_5:
   \   000000C8   0C20               MOV         R0,#+12
   \   000000CA   6043               MUL         R0,R4
   \   000000CC   0399               LDR         R1,[SP, #+12]
   \   000000CE   0818               ADD         R0,R1,R0
   \   000000D0   0190               STR         R0,[SP, #+4]
   \   000000D2   A000               LSL         R0,R4,#+2
   \   000000D4   0199               LDR         R1,[SP, #+4]
   \   000000D6   0918               ADD         R1,R1,R0
   \   000000D8   0091               STR         R1,[SP, #+0]
   \   000000DA   0399               LDR         R1,[SP, #+12]
   \   000000DC   0818               ADD         R0,R1,R0
   \   000000DE   0290               STR         R0,[SP, #+8]
   \   000000E0   6946               MOV         R1,SP
   \   000000E2   097C               LDRB        R1,[R1, #+16]
   \   000000E4   2806               LSL         R0,R5,#+24
   \   000000E6   000E               LSR         R0,R0,#+24
   \   000000E8   8842               CMP         R0,R1
   \   000000EA   0026               MOV         R6,#+0
   \   000000EC   A7D2               BCS         ??invert3_3
   \   000000EE   E4E7               B           ??invert3_8
    206                 }
    207          }
   \                     ??invert3_4:
   \   000000F0   05B0               ADD         SP,#+20
   \   000000F2   ....               B           ??Subroutine12_0
    208          

   \                                 In segment CODE, align 4, keep-with-next
    209          void invert6( double matrix[6][6], unsigned char order )
    210          {	
   \                     invert6:
   \   00000000   F3B5               PUSH        {R0,R1,R4-R7,LR}
   \   00000002   83B0               SUB         SP,#+12
   \   00000004   0026               MOV         R6,#+0
   \   00000006   2BE0               B           ??invert6_0
    211          	
    212          	unsigned char m, i, j;
    213          
    214          	
    215          	for( m=0; m<order; m++ ){
    216             	  for( i=0; i<order; i++ ){
    217          	    for( j=0; j<order; j++ ){
    218          	      if( ( i!=m ) && ( j!=m ) ) {
    219          		    matrix[i][j] = matrix[i][j] - matrix[i][m]*matrix[m][j]/matrix[m][m];
    220          															   }	
    221                      }
    222          	  }
    223          	  
    224          	  for( j=0; j<order; j++ ){	
    225          		  if( j != m ){
   \                     ??invert6_1:
   \   00000008   3106               LSL         R1,R6,#+24
   \   0000000A   090E               LSR         R1,R1,#+24
   \   0000000C   8842               CMP         R0,R1
   \   0000000E   17D0               BEQ         ??invert6_2
    226          			  matrix[m][j] =  matrix[m][j]/matrix[m][m];
   \   00000010   E800               LSL         R0,R5,#+3
   \   00000012   0199               LDR         R1,[SP, #+4]
   \   00000014   0C18               ADD         R4,R1,R0
   \   00000016   03CC               LDMIA       R4!,{R0,R1}
   \   00000018   083C               SUB         R4,#+8
   \   0000001A   009A               LDR         R2,[SP, #+0]
   \   0000001C   0CCA               LDMIA       R2!,{R2,R3}
   \   0000001E   ........           _BLF        __dDiv,??__dDiv??rT
   \   00000022   03C4               STMIA       R4!,{R0,R1}
    227          			  matrix[j][m] = -matrix[j][m]/matrix[m][m];
   \   00000024   3020               MOV         R0,#+48
   \   00000026   6843               MUL         R0,R5
   \   00000028   0299               LDR         R1,[SP, #+8]
   \   0000002A   0C18               ADD         R4,R1,R0
   \   0000002C   03CC               LDMIA       R4!,{R0,R1}
   \   0000002E   083C               SUB         R4,#+8
   \   00000030   009A               LDR         R2,[SP, #+0]
   \   00000032   0CCA               LDMIA       R2!,{R2,R3}
   \   00000034   ........           _BLF        __dDiv,??__dDiv??rT
   \   00000038   8022               MOV         R2,#+128
   \   0000003A   1206               LSL         R2,R2,#+24         ;; #-2147483648
   \   0000003C   5140               EOR         R1,R2
   \   0000003E   03C4               STMIA       R4!,{R0,R1}
    228          		  }
    229          	  }
   \                     ??invert6_2:
   \   00000040   6D1C               ADD         R5,R5,#+1
   \                     ??invert6_3:
   \   00000042   6946               MOV         R1,SP
   \   00000044   097C               LDRB        R1,[R1, #+16]
   \   00000046   2806               LSL         R0,R5,#+24
   \   00000048   000E               LSR         R0,R0,#+24
   \   0000004A   8842               CMP         R0,R1
   \   0000004C   DCD3               BCC         ??invert6_1
    230          
    231          	
    232          	  matrix[m][m] = 1.0/matrix[m][m];
   \   0000004E   009C               LDR         R4,[SP, #+0]
   \   00000050   0020               MOV         R0,#+0
   \   00000052   ....               LDR         R1,??DataTable2    ;; 0x3ff00000
   \   00000054   221C               MOV         R2,R4
   \   00000056   0CCA               LDMIA       R2!,{R2,R3}
   \   00000058   ........           _BLF        __dDiv,??__dDiv??rT
   \   0000005C   03C4               STMIA       R4!,{R0,R1}
   \   0000005E   761C               ADD         R6,R6,#+1
   \                     ??invert6_0:
   \   00000060   6946               MOV         R1,SP
   \   00000062   097C               LDRB        R1,[R1, #+16]
   \   00000064   3006               LSL         R0,R6,#+24
   \   00000066   000E               LSR         R0,R0,#+24
   \   00000068   8842               CMP         R0,R1
   \   0000006A   42D2               BCS         ??invert6_4
   \   0000006C   0024               MOV         R4,#+0
   \   0000006E   2CE0               B           ??invert6_5
   \                     ??invert6_6:
   \   00000070   2006               LSL         R0,R4,#+24
   \   00000072   000E               LSR         R0,R0,#+24
   \   00000074   3106               LSL         R1,R6,#+24
   \   00000076   090E               LSR         R1,R1,#+24
   \   00000078   8842               CMP         R0,R1
   \   0000007A   1ED0               BEQ         ??invert6_7
   \   0000007C   2806               LSL         R0,R5,#+24
   \   0000007E   000E               LSR         R0,R0,#+24
   \   00000080   8842               CMP         R0,R1
   \   00000082   1AD0               BEQ         ??invert6_7
   \   00000084   EA00               LSL         R2,R5,#+3
   \   00000086   3020               MOV         R0,#+48
   \   00000088   6043               MUL         R0,R4
   \   0000008A   0399               LDR         R1,[SP, #+12]
   \   0000008C   0918               ADD         R1,R1,R0
   \   0000008E   8F18               ADD         R7,R1,R2
   \   00000090   0299               LDR         R1,[SP, #+8]
   \   00000092   0818               ADD         R0,R1,R0
   \   00000094   03C8               LDMIA       R0!,{R0,R1}
   \   00000096   03B4               PUSH        {R0,R1}
   \   00000098   0398               LDR         R0,[SP, #+12]
   \   0000009A   8018               ADD         R0,R0,R2
   \   0000009C   03C8               LDMIA       R0!,{R0,R1}
   \   0000009E   0CBC               POP         {R2,R3}
   \   000000A0   ........           _BLF        __dMul,??__dMul??rT
   \   000000A4   009A               LDR         R2,[SP, #+0]
   \   000000A6   0CCA               LDMIA       R2!,{R2,R3}
   \   000000A8   ........           _BLF        __dDiv,??__dDiv??rT
   \   000000AC   021C               MOV         R2,R0
   \   000000AE   0B1C               MOV         R3,R1
   \   000000B0   03CF               LDMIA       R7!,{R0,R1}
   \   000000B2   083F               SUB         R7,#+8
   \   000000B4   ........           _BLF        __dSub,??__dSub??rT
   \   000000B8   03C7               STMIA       R7!,{R0,R1}
   \                     ??invert6_7:
   \   000000BA   6D1C               ADD         R5,R5,#+1
   \                     ??invert6_8:
   \   000000BC   6946               MOV         R1,SP
   \   000000BE   097C               LDRB        R1,[R1, #+16]
   \   000000C0   2806               LSL         R0,R5,#+24
   \   000000C2   000E               LSR         R0,R0,#+24
   \   000000C4   8842               CMP         R0,R1
   \   000000C6   D3D3               BCC         ??invert6_6
   \   000000C8   641C               ADD         R4,R4,#+1
   \                     ??invert6_5:
   \   000000CA   3020               MOV         R0,#+48
   \   000000CC   7043               MUL         R0,R6
   \   000000CE   0399               LDR         R1,[SP, #+12]
   \   000000D0   0818               ADD         R0,R1,R0
   \   000000D2   0190               STR         R0,[SP, #+4]
   \   000000D4   F000               LSL         R0,R6,#+3
   \   000000D6   0199               LDR         R1,[SP, #+4]
   \   000000D8   0918               ADD         R1,R1,R0
   \   000000DA   0091               STR         R1,[SP, #+0]
   \   000000DC   0399               LDR         R1,[SP, #+12]
   \   000000DE   0818               ADD         R0,R1,R0
   \   000000E0   0290               STR         R0,[SP, #+8]
   \   000000E2   6946               MOV         R1,SP
   \   000000E4   097C               LDRB        R1,[R1, #+16]
   \   000000E6   2006               LSL         R0,R4,#+24
   \   000000E8   000E               LSR         R0,R0,#+24
   \   000000EA   8842               CMP         R0,R1
   \   000000EC   0025               MOV         R5,#+0
   \   000000EE   A8D2               BCS         ??invert6_3
   \   000000F0   E4E7               B           ??invert6_8
    233          	}
    234          }
   \                     ??invert6_4:
   \   000000F2   05B0               ADD         SP,#+20
   \   000000F4   ....               B           ??Subroutine12_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0000F03F           DC32        0x3ff00000

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0000F03F           DC32        0x3ff00000

   Maximum stack usage in bytes:

     Function        CSTACK
     --------        ------
     accel2euler        28
     compass_heading    72
     dcv2euler          12
     euler2quat         60
     invert2            16
     invert3            40
     invert6            48
     norm               20
     quat2DCM           24
     quat2dcv           24
     quat2euler         32
     rad2deg            24


   Segment part sizes:

     Function/Label  Bytes
     --------------  -----
     norm              82
     ?Subroutine12      8
     rad2deg           68
     compass_heading  348
     update_flag        1
     accel2euler      184
     quat2dcv         202
     dcv2euler         44
     quat2euler       260
     euler2quat       362
     invert2           90
     quat2DCM         348
     invert3          244
     invert6          246
     ??DataTable0       4
     ??DataTable2       4
      Others          284

 
 2 766 bytes in segment CODE
     1 byte  in segment DATA_Z
    12 bytes in segment INITTAB
 
 2 494 bytes of CODE memory (+ 284 bytes shared)
     1 byte  of DATA memory

Errors: none
Warnings: none
